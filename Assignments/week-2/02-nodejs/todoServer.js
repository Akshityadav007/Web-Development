/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const fs = require("fs");
const { v4: uuidv4 } = require('uuid');
const bodyParser = require('body-parser');

const app = express();
// const port = 3000;
const todoFilePath = 'todos.json';

app.use(bodyParser.json());

// Get all TODOs
app.get('/todos', (req, res) => {
  fs.readFile(todoFilePath, 'utf-8', (err, data) => {
    if (err) throw err;
    res.status(200).json(JSON.parse(data));
  });
});

// Get a specific todo
app.get('/todos/:id', (req, res) => {
  fs.readFile(todoFilePath, "utf-8", (err, data) => {
    if(err) throw err;
    else{
      const todoList = JSON.parse(data);
      const currId = req.params.id;
      const index = todoList.findIndex(todo => todo.id === currId);

      if(index >= 0) res.status(200).send(todoList[index]);
      else res.status(404).send();
    }
  })
})

// Add a new TODO
app.post('/todos', (req, res) => {
  fs.readFile(todoFilePath, 'utf-8', (err, data) => {
    if (err) throw err;
    else{
      const jsonArray = JSON.parse(data);

      const newId = uuidv4();

      const newTodo = {
        id: newId,
        title: req.body.title,
        completed: req.body.completed,
        description: req.body.description
      };

      jsonArray.push(newTodo);

      fs.writeFile(todoFilePath, JSON.stringify(jsonArray), (err) => {
        if (err) throw err;
        else res.status(201).json({id : newId});
      });
    }
  });
});

// Update a TODO
app.put('/todos/:id', (req, res) => {
  fs.readFile(todoFilePath, 'utf-8', (err, data) => {
    if (err) throw err;
    else{
      const jsonArray = JSON.parse(data);
      const updateId = req.params.id; // UUID is a string
      const index = jsonArray.findIndex(todo => todo.id === updateId);

      if (index >= 0) {
        jsonArray[index].completed = req.body.completed;
        jsonArray[index].title = req.body.title;

        fs.writeFile(todoFilePath, JSON.stringify(jsonArray), (err) => {
          if (err) throw err;
          else res.status(200).send('OK!');
        });
      } 
      else res.status(404).send();
    }
  });
});

// Delete a TODO
app.delete('/todos/:id', (req, res) => {
  fs.readFile(todoFilePath, 'utf-8', (err, data) => {
    if (err) throw err;
    else {
      let jsonArray = JSON.parse(data);
      const deleteId = req.params.id; // UUID is a string
      const index = jsonArray.findIndex(todo => todo.id === deleteId);

      if (index >= 0) {
        jsonArray.splice(index, 1);

        fs.writeFile(todoFilePath, JSON.stringify(jsonArray, null, 2), (err) => {
          if (err) throw err;
          else res.status(200).send('OK!');
        });
      } 
      else res.status(404).send('Not Found');
    } 
  });
});


// for all other requests, return 404
app.use((req, res, next) => {
  res.status(404).send();
})

// app.listen(port);

  
module.exports = app;